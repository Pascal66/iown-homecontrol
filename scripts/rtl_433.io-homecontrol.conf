#!/usr/bin/rtl_433
#
# io-homecontrol (Somfy, Velux, etc.) Decoder for use with rtl_433 - https://github.com/velocet/iown-homecontrol
#
#   - Tested with: rtl_433-win-msvc-x64-nightly.zip
#
# - Get the latest rtl_433 nightly release:
#   https://github.com/merbanan/rtl_433/releases/tag/nightly
# - Optional:
#   If you have a "rtl-sdr Blog" device:
#   - Get the latest driver: https://github.com/rtlsdrblog/rtl-sdr-blog/releases
#   - Extract the DLLs into the rtl_433 folder and overwrite when asked
# - Place rtl_433.conf in the rtl_433 directory and run without any arguments
#
# io-homecontrol (iohc) has two protocol modes with different frequencies:
# - One-Way (1W) - Packages are repeated 4 times with different preamble lengths
#   - 868,95 MHz (Channel 2)
# - Two-Way (2W) - Frequency Hopping with 2,75 ms per Channel (Patent states 3 ms)
#   - 868,25 MHz (Channel 1)
#   - 868,95 MHz (Channel 2)
#   - 869,85 MHz (Channel 3)
# - Signal Encoding: NRZ (Non-Return-to-Zero)
# - BaudRate: 38400 bps (~26us)
# - Bus line signal:
#   - "High" during each entire "1" in the transmitted data.
#   - "Low" during each entire "0".
#   - The signal only changes state when the data changes and has the same number of transitions as the data stream to be transmitted.
# - Message Encoding: UART (38400-8N1 LSb)
#   - 8 Data bits equal 10 Packet bits (1 Start bit + 8 Data bit + 1 Stop bit).
#   - Bit Order: Least Significant bit (LSb) = Read bits from right to left.
#
# Protocol Description:
# - [n] Sync Pulse (Ramp Up Phase): 38,21ms (Consist of all-ones and is not to be confused with data!)
# - [n] Preamble (Hardware Sync): 0x55 (Variable Length)
# - [n] Sync Word (Software Sync): 0xFF33 (UART Encoded: 0x7FD99 = 0b0 0xFF 0b10 0xCC 0b1 = 0b01111111110001100111. NOTE: 0x33 is 0xCC "on the wire")
# - [n] Message
#   - [8] Header
#     - [1] Control Byte 1
#       - [0b11100000] Don't mind
#       - [0b00011111] Message Length in Byte
#     - [1] Control Byte 2
#     - [3] Destination Address (LSb) in the Form: 0x00:00:00
#     - [3] Sender Address (LSb) in the Form: 0x00:00:00
#   - [n] Data
#     - [1] Command ID
#     - [n] Command ID Parameter
#     - [2] Rolling Code (NOTE: 1W Only!)
#     - [6] AES-128 HMAC (NOTE: 1W Only!)
#   - [2] CRC-16/KERMIT (https://reveng.sourceforge.io/crc-catalogue/16.htm#crc.cat.crc-16-kermit)
#     - poly=0x1021 init=0 refin/refout=true xorout=0 check=0x2189 residue=0

# 1=fatal, 2=critical, 3=error, 4=warning (default), 5=notice, 6=info, 7=debug, 8=trace
#verbose

## Tuner
#device 0
#device_mode   quit
gain 42.1
frequency   868.91M
sample_rate 1000k
report_meta level

## Demodulator options
#pulse_detect auto         # FSK pulse detector mode.
#pulse_detect level=0      # Detection level to determine pulses (-1.0 to -30.0) (0=auto).
#pulse_detect minsnr=9     # [<dB level>] Minimum SNR to determine pulses (1.0 to 99.0).
#pulse_detect minlevel=-12 # [<dB level>] Minimum detection level to determine pulses (-1.0 to -99.0).
pulse_detect autolevel     # [autolevel] Minlevel based on average estimated noise.
pulse_detect squelch       # [squelch] Skip frames below estimated noise level to lower cpu load.
pulse_detect magest        # [ampest | magest] Amplitude or magnitude level estimator.

## Analyze/Debug/Output options
#analyze false        # Textual signal description. Disables decoding.
#analyze_pulses false # Pulse analysis and decode attempt.
#output json          # [log|kv|json|csv|trigger|null] Output in given format.
#convert si           # [native|si] Output converted units.
#samples_to_read 0    # Samples to take (a sample is 2 bytes: 1 of I & Q)
#duration 0           # Seconds to run
#stop_after_successful_events quit # Quit after outputting successful event(s)

# NOTE: You can also combine the offical decoder with your own flex decoder:
# - 2W: rtl_433 -g 42.1 -f 868.91M -s 2000k -R 189 -X "name=iown,modulation=FSK_PCM,short=26,long=26,sync=26,reset=312,gap=312,tolerance=2,preamble=0xFD99,decode_uart"
# - 1W: rtl_433 -g 42.1 -f 868.91M -s 250k -R 189 -X "name=iown,modulation=FSK_PCM,short=26,long=26,sync=26,reset=312,gap=312,tolerance=2,preamble=0xFD99,decode_uart"
## Protocols to enable (command line option "-R")
protocol 189 # Somfy io-homecontrol
## Flex devices (command line option "-X")
#         FSK_PCM : FSK Pulse Code Modulation
#            short: Nominal width of pulse [us]
#             long: Nominal width of bit period [us]
#              gap: Maximum gap size before new row of bits [us]
#            reset: Maximum gap size before End Of Message [us]
#        tolerance: Maximum pulse deviation [us] (optional).
# preamble=<bits> : match and align at the <bits> preamble where <bits> is a row spec of {<bit count>}<bits as hex number>
#     decode_uart : UART 8n1 (10-to-8) decode
decoder {name=iown,modulation=FSK_PCM,short=26,long=26,sync=26,reset=2600,gap=312,tolerance=2,preamble=0xFD99,decode_uart}

# TODO Implement correct decoder
# decoder {
#   name=io-homecontrol,
#   modulation=FSK_PCM,
#   short=26,
#   long=26,
#   sync=26,
#   gap=640,
#   reset=1280,
#   preamble={0x57FD99},
#   #preamble={0x55,0x55,0xFF},
#   bits>=56,
#
#   get=cb1:@0:{8}:[0x2a:HOLD_TIME 0x2c:REL_TIME 0x26:HOLD_CODE 0x24:REL_CODE],
#   get=cb2:@8:{8}:%x,
#   get=da:@16:{24}:%02x-%02x-%02x,
#   get=sa:@16:{24}:%02x-%02x-%02x,
#   get=sa:@40:{24}:[0x000000:GROUP 0xFFFFFF:BROADCAST],
#   get=cmd:@64:{8},
#   get=rc:@56:{8},
#   get=crc:@64:{32}:%08x,
#   get=xorsum:@96:{8}:%02x,
# }
