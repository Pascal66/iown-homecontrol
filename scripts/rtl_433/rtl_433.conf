#!/usr/bin/rtl_433
#
# rtl_433 io-homecontrol (Somfy, Velux, etc.) decoder - https://github.com/velocet/iown-homecontrol
#
# - rtl_433 nightly download: https://github.com/merbanan/rtl_433/releases/tag/nightly
# - If you have a "rtl-sdr Blog" device:
#   - Download latest driver: https://github.com/rtlsdrblog/rtl-sdr-blog/releases
#   - Extract DLLs into rtl_433 folder and overwrite when asked
# - Place rtl_433.conf in the rtl_433 folder and run without arguments
#
# io-homecontrol (iohc) has two modes with different frequencies:
# - One-Way (1W)
#   - 868,95 MHz (Channel 2)
# - Two-Way (2W) - Frequency Hopping with ~2,75ms per Channel
#   - 868,25 MHz (Channel 1)
#   - 868,95 MHz (Channel 2)
#   - 869,85 MHz (Channel 3)
# - Modulation: 2-FSK
# - Signal Encoding: NRZ (Non-Return-to-Zero)
# - BaudRate: 38400bps (~26us/bit)
# - Message Encoding: UART (38400-8N1 LSb)
#
# Protocol:
# - Sync Pulse (Ramp Up Phase): ~38ms (Consist of all-ones and is not to be confused with data!)
# - [52] Preamble (Hardware Sync): 52 x 0x55 (~ 10,8-13,5ms)
# - [2] Sync Word (Software Sync): 0xFF33 (UART Encoded: 0x7FD99 = 0b0 0xFF 0b10 0xCC 0b1 = 0b01111111110001100111. NOTE: 0x33 is 0xCC "on the wire")
# - [2] Header
#   - [1] Control Byte 1
#     - [0b00011111] Message Length in Byte
#   - [1] Control Byte 2
# - [3] Destination Address (LSb)
# - [3] Sender Address (LSb)
# - [n] Data
#   - [1] Command ID
#   - [n] Command ID Parameter
#   - [2] Rolling Code (NOTE: 1W Only!)
#   - [6] AES-128 HMAC (NOTE: 1W Only!)
#   - [2] CRC-16/KERMIT (https://reveng.sourceforge.io/crc-catalogue/16.htm#crc.cat.crc-16-kermit)
#     - poly=0x1021 init=0 refin/refout=true xorout=0 check=0x2189 residue=0

## Tuner
gain 42.1
frequency 868.89M
sample_rate 1000k

## Demodulator options
#pulse_detect autolevel # [autolevel] Minlevel based on average estimated noise.
#pulse_detect squelch   # [squelch] Skip frames below estimated noise level to lower cpu load.
#pulse_detect magest    # [ampest | magest] Amplitude or magnitude level estimator.

## Analyze/Debug/Output options
#output json       # [log|kv|json|csv|trigger|null] Output format.
report_meta level

# NOTE: You can also combine the builtin decoder with the flex decoder:
# - 2W: rtl_433 -g 42.1 -f 868.89M -s 2000k -R 189 -X "name=iown,modulation=FSK_PCM,short=26,long=26,sync=26,reset=312,gap=312,tolerance=2,preamble=0xFD99,decode_uart"
# - 1W: rtl_433 -g 42.1 -f 868.89M -s  250k -R 189 -X "name=iown,modulation=FSK_PCM,short=26,long=26,sync=26,reset=312,gap=312,tolerance=2,preamble=0xFD99,decode_uart"
protocol 189 # Enable io-homecontrol decoder

## Flex devices (command line option "-X")
#         FSK_PCM : FSK Pulse Code Modulation
#            short: Nominal width of pulse [us]
#             long: Nominal width of bit period [us]
#              gap: Maximum gap size before new row of bits [us]
#            reset: Maximum gap size before End Of Message [us]
#        tolerance: Maximum pulse deviation [us] (optional).
# preamble=<bits> : match and align at the <bits> preamble
#                   <bits> is a row of {<bit count>}<bits as hex>
#     decode_uart : UART 8n1 decode
decoder {
  name=iown,
  modulation=FSK_PCM,
  short=26,
  long=26,
  sync=26,
  gap=312,
  reset=312,
  tolerance=2,
  preamble=0xFD99,
  bits>=64,
  decode_uart,
  get=Order:@0:{2}:%d,
  get=Bytes:@3:{5}:%d,
  get=IsLPM:@10:{1}:[0:No 1:Yes],
  get=DEST.:@16:{24}:%x,
  get=SOURCE:@40:{24}:%x,
  get=CMD:@64:{8}:%x
}
