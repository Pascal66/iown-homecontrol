options:
  parameters:
    author: Thomas Buck
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: Slices the IO-Homecontrol Stream to a bit stream
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: hb
    hier_block_src_path: '.:'
    id: io_homecontrol_slicer
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: IO Homecontrol Slicer
    window_size: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: bingroup
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: BinGrouping
    short_id: ''
    type: intx
    value: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [112, 432]
    rotation: 0
    state: enabled
- name: channel
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Channel
    short_id: ''
    type: intx
    value: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 252]
    rotation: 0
    state: enabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\ndef compute_crc_8408_byte(data, crc = 0):\n    crc\
      \ ^= data\n    for i in range(8):\n        remainder = 0x8408 if crc & 1 else\
      \ 0\n        crc = (crc >> 1) ^ remainder\n    return crc\n\ndef compute_crc_8408(data,\
      \ crc = 0):\n    for b in data:\n        crc = compute_crc_8408_byte(b, crc)\n\
      \    return crc\n\nclass blk(gr.sync_block):  # other base classes are basic_block,\
      \ decim_block, interp_block\n    \"\"\"IO-HomeControl Decoder \n       Decodes\
      \ the already demodulated signal to ha hexadecimal message fro further processing\n\
      \       \"\"\"\n\n    def __init__(self, samp_rate=1.0, channel=0, showhex=0,\
      \ hexgroup=2, showbin=1, bingroup=1, msglen=38, msgoffset=0):  # only default\
      \ arguments here\n        \"\"\"arguments to this function show up as parameters\
      \ in GRC\"\"\"\n        gr.sync_block.__init__(\n            self,\n       \
      \     name='IO-HomeControl Decoder',   # will show up in GRC\n            in_sig=[np.byte],\n\
      \            out_sig=[]\n        )\n        # if an attribute with the same\
      \ name as a parameter is found,\n        # a callback is registered (properties\
      \ work, too).\n        self.samp_rate = samp_rate\n        self.channel=channel\n\
      \        self.showhex=showhex\n        self.hexgroup=hexgroup\n        self.showbin=showbin\n\
      \        self.bingroup=bingroup\n        self.msglen=msglen\n        self.msgoffset=msgoffset\n\
      \        # Internal Variables        \n        self.last=0\n        self.mode=0\n\
      \        self.lasttrans=0        \n        self.byts = [int(0)] * self.msglen\n\
      \        self.bits = [int(0)] * self.msglen * 8\n        self.nextbit=0\n  \
      \      self.nextsmp=0\n        self.period=0\n        self.tick=0\n        self.unsync_bit_min=8\n\
      \        self.unsync_bit_max=10\n        self.sync_bit_min=7\n        self.sync_bit_max=11\n\
      \        self.sync_lost=13\n        self.sync_min_cycles=200\n        self.start_bit\
      \ = False\n        self.stop_bit = False\n        self.total_bit = 0\n\n\n \
      \   def work(self, input_items, output_items):\n        \"\"\"example: multiply\
      \ with constant\"\"\"\n        self.decodeChannel(input_items[0])\n        #\
      \ output_items[0][:] = input_items[0] * 0.1\n        return len(input_items[0])\n\
      \n\n    def makeMessage(self,tick,bits,byts,crc):\n        s = \"io_home_control_data,\
      \ ch=%i, tick=%i\" %(self.channel,tick)\n        if crc:\n            s += \"\
      , crc=ok\"\n        else:\n            s += \", crc=not_ok\"\n        \n   \
      \     if self.showhex != 0:\n            s+=\", hex= \"\n            if self.hexgroup\
      \ <= 0:\n                for i in range(len(byts)):\n                    s+=\"\
      %02X\" %(byts[i])\n            else:\n                grpctr=self.hexgroup \
      \        \n                for i in range(len(byts)):\n                    s+=\"\
      %02X\" %(byts[i])\n                    grpctr-=1\n                    if grpctr\
      \ <= 0:\n                        grpctr=self.hexgroup\n                    \
      \    s+=\" \"\n        if self.showbin != 0:\n            s+=\", bin= \"\n \
      \           if self.bingroup <= 0:\n                for i in range(len(bits)):\n\
      \                    s+=\"%i\" %(bits[i])\n            else:\n             \
      \   grpctr=self.bingroup         \n                for i in range(len(bits)):\n\
      \                    s+=\"%i\" %(bits[i])\n                    grpctr-=1\n \
      \                   if grpctr <= 0:\n                        grpctr=self.bingroup\n\
      \                        s+=\" \"                \n        return s\n    \n\
      \    def decodeChannel(self,data) :\n        l=len(data)\n        for smp in\
      \ range(0,l):\n            i=self.tick\n            v=int(data[smp])       \
      \     \n            if self.mode == 0:\n                # Unsynced\n       \
      \         if v == 0 and self.last == 1:\n                    # high to low\n\
      \                    delay=i-self.lasttrans\n                    if delay >=\
      \ 8 and delay <= 10:\n                        # Valid period\n             \
      \           self.syncstart = self.lasttrans\n                        self.synccount\
      \ = 1\n                        self.mode = 1\n                    self.lasttrans=i\n\
      \            elif self.mode == 1:\n                # Sync started\n        \
      \        if v == 0 and self.last == 1:\n                    # high to low \n\
      \                    delay=i-self.lasttrans\n                    if delay >=\
      \ 7 and delay <= 11:\n                        self.synccount+=1\n          \
      \          else:\n                        self.mode = 0\n                  \
      \  self.lasttrans = i\n                else:\n                    if i - self.lasttrans\
      \ >= 13:\n                        # lost sync\n                        self.mode\
      \ = 0\n                        if self.synccount >= 200:\n                 \
      \           # success\n                            self.mode = 2\n         \
      \                   self.nextbit = 0                        \n             \
      \               self.period=(self.lasttrans-self.syncstart)/self.synccount\n\
      \                            self.byts = [0] * self.msglen\n               \
      \             self.bits = [0] * self.msglen * 8\n                          \
      \  self.start_bit = False\n                            self.stop_bit = False\n\
      \                            self.total_bit = 0\n                          \
      \  self.nextsmp=int(self.lasttrans-self.period/4+(self.total_bit+3+8+self.msgoffset)*self.period/2)\n\
      \                            if self.nextsmp <= i:\n                       \
      \         # Error\n                                print(\"Bad Offset - cannot\
      \ go that far back\")\n                                self.mode=0\n       \
      \     elif self.mode == 2:\n                if i == self.nextsmp:\n        \
      \            if not self.start_bit:\n                        self.start_bit\
      \ = True\n                    elif not self.stop_bit:\n                    \
      \    self.bits[self.nextbit] = v\n                        self.byts[int(self.nextbit/8)]\
      \ |= v << (self.nextbit%8)\n                        self.nextbit+=1\n      \
      \                  if self.nextbit % 8 == 0:\n                            self.stop_bit\
      \ = True\n                    else:\n                        self.stop_bit =\
      \ False\n                        self.start_bit = False\n                  \
      \  \n                    self.total_bit += 1\n                    \n       \
      \             self.nextsmp = int(self.lasttrans-self.period/4+(self.total_bit+3+8+self.msgoffset)*self.period/2)\n\
      \                    if self.nextbit >= len(self.bits):\n                  \
      \      # done\n                        self.mode = 0\n                     \
      \   if self.byts[0] == 0x33:\n                        \tlength = self.byts[1]\
      \ & 0x1f\n                        \tself.byts = self.byts[:2+length+2] # length\
      \ of the preamble and length bytes, length of the payload, length of the trailer\
      \ CRC\n                        \tcrc = compute_crc_8408(bytes(self.byts[1:-2]))\n\
      \                        \tif crc == (self.byts[-1] << 8) + self.byts[-2]:\n\
      \                        \t    crc = True\n                        \telse:\n\
      \                        \t    crc = False\n                        \tms = self.makeMessage(self.syncstart,self.bits,self.byts,\
      \ crc)\n                        \tprint(ms)\n            \n            self.last=v\n\
      \            self.tick+=1            \n       \n"
    affinity: ''
    alias: ''
    bingroup: bingroup
    channel: channel
    comment: ''
    hexgroup: hexgroup
    maxoutbuf: '0'
    minoutbuf: '0'
    msglen: msglen
    msgoffset: msgoffset
    samp_rate: srate
    showbin: showbin
    showhex: showhex
  states:
    _io_cache: ('IO-HomeControl Decoder', 'blk', [('samp_rate', '1.0'), ('channel',
      '0'), ('showhex', '0'), ('hexgroup', '2'), ('showbin', '1'), ('bingroup', '1'),
      ('msglen', '38'), ('msgoffset', '0')], [('0', 'byte', 1)], [], 'IO-HomeControl
      Decoder \n       Decodes the already demodulated signal to ha hexadecimal message
      fro further processing\n       ', ['bingroup', 'channel', 'hexgroup', 'msglen',
      'msgoffset', 'samp_rate', 'showbin', 'showhex'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [552, 140]
    rotation: 0
    state: enabled
- name: hexgroup
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: HexGrouping
    short_id: ''
    type: intx
    value: '2'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [216, 344]
    rotation: 0
    state: enabled
- name: msglen
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: MessageLen in bytes
    short_id: ''
    type: intx
    value: '38'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 520]
    rotation: 0
    state: enabled
- name: msgoffset
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Messageoffset in bits
    short_id: ''
    type: intx
    value: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [168, 520]
    rotation: 0
    state: enabled
- name: pad_source_0
  id: pad_source
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    label: in
    maxoutbuf: '0'
    minoutbuf: '0'
    num_streams: '1'
    optional: 'False'
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [336, 196]
    rotation: 0
    state: enabled
- name: showbin
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: ShowBin
    short_id: ''
    type: intx
    value: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 432]
    rotation: 0
    state: enabled
- name: showhex
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: ShowHex
    short_id: ''
    type: intx
    value: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 344]
    rotation: 0
    state: enabled
- name: srate
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Sample Rate
    short_id: ''
    type: eng_float
    value: 2.4e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 164]
    rotation: 0
    state: enabled

connections:
- [pad_source_0, '0', epy_block_0, '0']

metadata:
  file_format: 1
